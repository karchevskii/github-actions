name: Test, build and deploy

on:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 # Check out the repository content to github runner

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for local usage
        run: npm run build

      - name: Save build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: .next
          path: .next

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            karchevskii/github-actions:latest
            karchevskii/github-actions:${{ github.ref_name }}

  deploy:
    needs: [test, build]
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Docker image
        run: docker pull karchevskii/github-actions:latest

      - name: Check if container is running
        id: check_container
        run: |
          if docker container inspect myapp-container; then
            echo "Container exists, stopping and removing it..."
            docker stop myapp-container
            docker rm myapp-container
            echo "::set-output name=exists::true"
          else
            echo "Container does not exist."
            echo "::set-output name=exists::false"
          fi

      - name: Run Docker container
        run: docker run -d -p 3000:3000 --name myapp-container karchevskii/github-actions:latest